/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.20
 * Generated at: 2024-05-01 01:38:36 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.Pages;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.sql.*;
import oracle.jdbc.*;
import java.sql.*;
import oracle.jdbc.*;
import java.util.*;

public final class joinedCommunitiesList_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/Pages/../DBconnection.jsp", Long.valueOf(1714526665692L));
    _jspx_dependants.put("/Pages/../userAuth.jsp", Long.valueOf(1714526668175L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(6);
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_packages.add("oracle.jdbc");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;



try {
    int userCheck = (int) session.getAttribute("userType");
    
    if(userCheck != 1 && userCheck != 2) {
        response.sendRedirect("index.jsp");
    }
}
catch(Exception E) {
    response.sendRedirect("index.jsp");
}


// create a hiddent p element that can be used by headerLoggedIn.js to get the user's username
String usernameForHeader = "You";

try{
    usernameForHeader = (String) session.getAttribute("username");
}
catch(Exception E) {
    usernameForHeader = "You";
}

      out.write("\n");
      out.write("<p id=\"usernameForHeader\" style=\"display: none;\">");
      out.print(usernameForHeader);
      out.write("</p>");
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');

    Connection con = null;

    try {
        Class.forName("oracle.jdbc.OracleDriver");
        con = DriverManager.getConnection("jdbc:oracle:thin:@//cscioraclerh7srv.ad.csbsju.edu:1521/" +
                                                                "csci.cscioraclerh7srv.ad.csbsju.edu",
                                                                "TEAM06", "TEAM06");
    }
    catch(Exception E) {
        out.println("EXCEPTION encountered");
        out.println(E);
    }

      out.write('\n');
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

String username = "";

try{
    username = (String) session.getAttribute("username");
}
catch(Exception E) {
    username = "";
}

      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("  <head>\n");
      out.write("    <meta charset=\"UTF-8\">\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n");
      out.write("    \n");
      out.write("    <link rel=\"stylesheet\" href=\"../Styles/styles.css\">\n");
      out.write("    <title>Tarpaulin - Your Joined Communities</title>\n");
      out.write("  <link rel=\"icon\" type=\"image/x-icon\" href=\"../Images/Tarpaulin_Logo_Alt_2.png\">\n");
      out.write("</head>\n");
      out.write("  <body class=\"studentHomeBody\">\n");
      out.write("    <script src=\"../Scripts/headerLoggedIn.js\"></script>\n");
      out.write("\n");
      out.write("    <img class=\"openNavbar\" src=\"../Images/menu.svg\">\n");
      out.write("\n");
      out.write("    <script src=\"../Scripts/loadSidebar.js\"></script>\n");
      out.write("\n");
      out.write("    <section class=\"mainContainer\">\n");
      out.write("      \n");
      out.write("      <p class=\"bigTitle\">Your Joined Communities</p>\n");
      out.write("\n");
      out.write("        <section class=\"communitiesListContainer\">\n");
      out.write("\n");
      out.write("            ");

            String rank = "NA";
            HashMap<Integer, String> scoresMap = new HashMap<Integer, String>();

            try {
                String query = 
                "SELECT community_id " + "\n" + 
                "FROM TARP_JOINED_BY" + "\n" + 
                "WHERE username='" + username + "'"; 
                PreparedStatement preparedStmt = con.prepareStatement(query);
                
                ResultSet result = preparedStmt.executeQuery();
                
                while(result.next()) {
                    String communityId = result.getString(1);

                    // get description
                    String queryInner = 
                    "SELECT c_description " + "\n" + 
                    "FROM TARP_COMMUNITY" + "\n" + 
                    "WHERE comm_id='" + communityId + "'"; 
                    PreparedStatement preparedStmtInner = con.prepareStatement(queryInner);
                    
                    ResultSet resultInner = preparedStmtInner.executeQuery();

                    String description = "";
                    while(resultInner.next()) {
                        description = resultInner.getString(1);
                        break;
                    }

                    resultInner.close();
                    preparedStmtInner.close();

                    // calculate rank - copied from communityView.jsp
                    
                    rank = "NA";

                    String rankQuery = 
                    "SELECT username " + "\n" + 
                    "FROM TARP_JOINED_BY" + "\n" + 
                    "WHERE community_id='" + communityId + "'";
                    
                    PreparedStatement rankPreparedStmt = con.prepareStatement(rankQuery);
                    
                    ResultSet rankResult = rankPreparedStmt.executeQuery();

                    String currentUser = "";
                    ArrayList<Integer> scores = new ArrayList<Integer>();

                    while(rankResult.next()) {
                        currentUser = rankResult.getString(1);
                        
                        // out.println("currentUser: " + currentUser);

                        // then get the score of each student
                        String queryInnerInner = 
                        "SELECT" + 
                        "    e.username, " + 
                        "    (count_student_completed_lectures(e.username) * 10)  " + 
                        "    + sum_student_tests(e.username) AS total_score " + 
                        "FROM" + 
                        "    tarp_enrolls e " + 
                        "INNER JOIN" + 
                        "    tarp_course c ON e.course_id = c.course_id " + 
                        "WHERE" + 
                        "    e.username='" + currentUser + "'";
                        PreparedStatement preparedStmtInnerInner = con.prepareStatement(queryInnerInner);
                        
                        // out.println("<p style='color: blue;'>" + queryInnerInner + "</p>");
                        
                        ResultSet resultInnerInner = preparedStmtInnerInner.executeQuery();

                        // out.println("  |  ");

                        int score = 0;
                        while(resultInnerInner.next()) {
                            // out.println("InnerInner iteration");
                            
                            score = Integer.parseInt(resultInnerInner.getString(2));
                            scoresMap.put(score, resultInnerInner.getString(1));

                            break;
                        }

                        resultInnerInner.close();
                        preparedStmtInnerInner.close();
                    }

                    rankResult.close();
                    rankPreparedStmt.close();

                    List<Integer> keys = new ArrayList(scoresMap.keySet());
                    Collections.sort(keys);

                    for (int i = keys.size() - 1; i >= 0; i--) {
                        if(scoresMap.get(keys.get(i)).equals(username)) {
                            rank = String.valueOf(keys.size() - i);

                            break;
                        }
                    }
            
      out.write("\n");
      out.write("            \n");
      out.write("                    <form class=\"community\" action=\"setCommunityIdSessionAttribute_action.jsp\" method=\"post\">\n");
      out.write("                        <p class=\"title\">");
      out.print(communityId);
      out.write("</p>\n");
      out.write("\n");
      out.write("                        <p>");
      out.print(description);
      out.write("</p>\n");
      out.write("                        \n");
      out.write("                        <div>\n");
      out.write("                            <p>Your Rank:</p>\n");
      out.write("                            <p>");
      out.print(rank);
      out.write("</p>\n");
      out.write("                        </div>\n");
      out.write("                        \n");
      out.write("                        <input type=\"text\" name=\"communityId\" value=");
      out.print(communityId);
      out.write(" style=\"display: none;\">\n");
      out.write("\n");
      out.write("                        <div class=\"controls\">\n");
      out.write("                            <button class=\"buttonNormal\" type=\"submit\">View</button>\n");
      out.write("                        </div>\n");
      out.write("                    </form>\n");
      out.write("                    \n");
      out.write("            ");

                }

                result.close();
                preparedStmt.close();
            }
            catch(Exception E) {
                out.println(E);
            }
                    
            
      out.write("\n");
      out.write("\n");
      out.write("        </section>\n");
      out.write("\n");
      out.write("    </section>\n");
      out.write("\n");
      out.write("    <script src=\"../Scripts/navbarToggle.js\"></script>\n");
      out.write("  </body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
